#include <SPI.h>
#include "RF24.h"

RF24 rf24(7, 8); // CE腳, CSN腳

byte addr[] = "1Node";

void setup() {
  rf24.begin();
  Serial.begin(9600);
  rf24.setChannel(83);       // 設定頻道編號
  rf24.openWritingPipe(addr); // 設定通道位址
  rf24.setPALevel(RF24_PA_MIN);   // 設定廣播功率
  rf24.setDataRate(RF24_250KBPS); // 設定傳輸速率
  rf24.stopListening();       // 停止偵聽；設定成發射模式
  // 設定input
  pinMode(0, INPUT);
  pinMode(1, INPUT);
  pinMode(2, INPUT);
  pinMode(3, INPUT);
  pinMode(4, INPUT);
  pinMode(5, INPUT);
}

void loop() {
  String ram = String((millis()/1000)) + "秒" + ";" + String(analogRead(0))+ ";" + String(analogRead(1))+ ";" + String(analogRead(3));
  Serial.println(ram);
  char msg[64];
  ram.toCharArray(msg, ram.length()+1);
  rf24.write(&msg, sizeof(msg));  // 傳送資料
  delay(10);
}



char* ConvertStringToCharArray(String S)
{
  int   ArrayLength  =S.length()+1;    //The +1 is for the 0x00h Terminator
  char  CharArray[ArrayLength];
  S.toCharArray(CharArray,ArrayLength);
  return(CharArray);
}








#include <SPI.h>
#include "RF24.h"
#include <printf.h>

RF24 rf24(7, 8, 4000000); // CE腳, CSN腳

byte addr[] = "1Node";
byte pipe = 1;  // 指定通道編號

void setup() {
  Serial.begin(9600);
  rf24.begin();
  printf_begin();
  rf24.setChannel(83);  // 設定頻道編號
  rf24.setPALevel(RF24_PA_MIN);
  rf24.setDataRate(RF24_250KBPS);
  rf24.openReadingPipe(pipe, addr);  // 開啟通道和位址
  rf24.startListening();  // 開始監聽無線廣播
  Serial.println("nRF24L01 ready!");
  rf24.printDetails();
  // 設定馬達
  pinMode(3, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  digitalWrite(5, LOW);
  digitalWrite(6, LOW);
}

void loop() {
  if (rf24.available(&pipe)) {
    char msg[64] = "";
    rf24.read(&msg, sizeof(msg));
    Serial.println(msg); // 顯示訊息內容
    String cat = String(msg);
    int a = getValue(cat, ";", 1).toInt();
    int b = getValue(cat, ";", 2).toInt();
    int c = getValue(cat, ";", 3).toInt();
    if (b < 300 ) {
      digitalWrite(5, LOW);
      digitalWrite(6, HIGH);
    } else if (b > 550) {
      digitalWrite(5, HIGH);
      digitalWrite(6, LOW);
    } else {
      digitalWrite(5, LOW);
      digitalWrite(6, LOW);
    }
  }
}
String getValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = { 0, -1 };
  int maxIndex = data.length() - 1;
  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i + 1 : i;
    }
  }
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}

